const AMPERSAND = "&",
    AMPERSANDEQUAL = "&=",
    ASTERISK = "*",
    ASTERISK2 = "**",
    ASTERISKEQUAL = "*=",
    ASTERISKPERCENT = "*%",
    ASTERISKPERCENTEQUAL = "*%=",
    ASTERISKPIPE = "*|",
    ASTERISKPIPEEQUAL = "*|=",
    CARET = "^",
    CARETEQUAL = "^=",
    COLON = ":",
    COLONEQUAL = ":=",
    COLON2EQUAL = "::=",
    COMMA = ",",
    DOT = ".",
    DOT2 = "..",
    DOT3 = "...",
    DOTASTERISK = ".*",
    DOTQUESTIONMARK = ".?",
    EQUAL = "=",
    EQUALEQUAL = "==",
    EQUALRARROW = "=>",
    EXCLAMATIONMARK = "!",
    EXCLAMATIONMARKEQUAL = "!=",
    LARROW = "<",
    LARROW2 = "<<",
    LARROW2PIPE = "<<|",
    LARROW2PIPEEQUAL = "<<|=",
    LARROW2EQUAL = "<<=",
    LARROWEQUAL = "<=",
    LBRACE = "{",
    LBRACKET = "[",
    LPAREN = "(",
    MINUS = "-",
    MINUSEQUAL = "-=",
    MINUSPERCENT = "-%",
    MINUSPERCENTEQUAL = "-%=",
    MINUSPIPE = "-|",
    MINUSPIPEEQUAL = "-|=",
    MINUSRARROW = "->",
    PERCENT = "%",
    PERCENTEQUAL = "%=",
    PIPE = "|",
    PIPE2 = "||",
    PIPEEQUAL = "|=",
    PLUS = "+",
    PLUS2 = "++",
    PLUSEQUAL = "+=",
    PLUSPERCENT = "+%",
    PLUSPERCENTEQUAL = "+%=",
    PLUSPIPE = "+|",
    PLUSPIPEEQUAL = "+|=",
    LETTERC = "c",
    QUESTIONMARK = "?",
    RARROW = ">",
    RARROW2 = ">>",
    RARROW2EQUAL = ">>=",
    RARROWEQUAL = ">=",
    RBRACE = "}",
    RBRACKET = "]",
    RPAREN = ")",
    SEMICOLON = ";",
    SLASH = "/",
    SLASHEQUAL = "/=",
    TILDE = "~",
    PREC = {
        curly: 1,
        assign: 2,
        primary: 3,
        or: 4,
        and: 5,
        comparative: 6,
        bitwise: 7,
        bitshift: 8,
        addition: 9,
        multiply: 10,
        prefix: 11,
    },
    buildin_type = [
        "bool",
        "f16",
        "f32",
        "f64",
        "f128",
        "void",
        "type",
        "anyerror",
        "anyframe",
        "anyopaque",
        "noreturn",
        "isize",
        "usize",
        "comptime_int",
        "comptime_float",
        "c_short",
        "c_ushort",
        "c_int",
        "c_uint",
        "c_long",
        "c_ulong",
        "c_longlong",
        "c_ulonglong",
        "c_longdouble",
        /(i|u)[0-9]+/,
    ],
    bin = /[01]/,
    bin_ = seq(optional("_"), bin),
    oct = /[0-7]/,
    oct_ = seq(optional("_"), oct),
    hex = /[0-9a-fA-F]/,
    hex_ = seq(optional("_"), hex),
    dec = /[0-9]/,
    dec_ = seq(optional("_"), dec),
    bin_int = seq(bin, repeat(bin_)),
    oct_int = seq(oct, repeat(oct_)),
    dec_int = seq(dec, repeat(dec_)),
    hex_int = seq(hex, repeat(hex_)),
    unescaped_string_fragment = token.immediate(prec(1, /[^"\\\{\}]+/)),
    unescaped_char_fragment = token.immediate(prec(1, /[^'\\]/));

module.exports = grammars({
  name: "toit",

  rules: {
    source_file: $ => "hello"
  }
})

function keyword(rule, _) {
  return rule;
  // return alias(rule, $.keyword);
}
